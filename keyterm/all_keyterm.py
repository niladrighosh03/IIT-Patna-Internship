# -*- coding: utf-8 -*-
"""All Keyterm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16J0EBE3EPZy8CExcESOhUnyfKquM9xKC
"""

# hugging face token= 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

"""## Gemma 4b-it"""

from transformers import AutoProcessor, Gemma3ForConditionalGeneration
import torch

# Use gemma-3-4b-it (text-only version)
model_id = "google/gemma-3-4b-it"

# Load model and processor
model = Gemma3ForConditionalGeneration.from_pretrained(
    model_id,
    device_map="auto"
).eval()

processor = AutoProcessor.from_pretrained(model_id)

def logical_extract_keywords(sentence):
    messages = [
        {
            "role": "system",
            "content": [{"type": "text", "text": "You are an assistant skilled in logical *persuasion strategy*."}]
        },
        {
            "role": "user",
            "content": [{
                "type": "text",
                "text": f"""Extract the *4 to 5 most important single-word keywords* from the following sentence, focusing specifically on the *Logical persuasion strategy*.

Return only the keywords as a comma-separated list, with no explanation or extra text.
Important: Do not include product names, brand names, place names, or proper nouns.

 Examples:
    Sentence: "I have a 2021 Honda Amaze. What insurance would you recommend?"
    Output: insurance, recommend

    Sentence: "It includes own damage, third-party liability, theft, natural disasters, and more. The premium is approx $1176 per year, based on IDV."
    Output: damage, theft, disaster, premium

    Sentence: "This plan provides better coverage and lower premium compared to the previous one."
    Output: coverage, premium, comparison

    Sentence: "The repair costs are significantly reduced with this policy."
    Output: repair, cost, policy

    Now, extract from the following:

Sentence: "{sentence}"
"""
            }]
        }
    ]


    try:
        # Prepare input
        inputs = processor.apply_chat_template(
            messages,
            add_generation_prompt=True,
            tokenize=True,
            return_dict=True,
            return_tensors="pt"
        ).to(model.device, dtype=torch.bfloat16)

        input_len = inputs["input_ids"].shape[-1]

        # Generate output
        with torch.inference_mode():
            output = model.generate(**inputs, max_new_tokens=50, do_sample=False)
            output = output[0][input_len:]

        # Decode and clean output
        decoded = processor.decode(output, skip_special_tokens=True).strip()
        keywords = [kw.strip() for kw in decoded.split(",") if kw.strip()]
        return keywords[:5] + [""] * (5 - len(keywords))

    except Exception as e:
        print(f"Error on: {sentence[:40]}... -> {e}")
        return [""] * 5

"""#### Emotinal"""

def emotional_extract_keywords(sentence):
    messages = [
    {
        "role": "system",
        "content": [{"type": "text", "text": "You are an assistant skilled in *Emotional persuasion strategy* keyword extraction."}]
    },
    {
        "role": "user",
        "content": [{
            "type": "text",
            "text": f"""Extract the *4 to 5 most important single-word keywords* from the following sentence, focusing specifically on the *Emotional persuasion strategy*.

Return only the keywords as a comma-separated list, with no explanation or extra text.
Important: Do not include product names, brand names, place names, or proper nouns.

Focus on words that express emotions, emotional triggers, fears, hopes, desires, or psychological concerns. Avoid factual or neutral terms unless they carry emotional weight.

Examples:
    Sentence: "And if I'm in an accident and need a rental car?"
    Output: accident, rental

    Sentence: "For your Jeep Wrangler, it's around $1200 per year. It's an investment in your adventures, knowing you're covered against the unexpected challenges of off-roading."
    Output: investment, adventures, unexpected, challenges, off-roading

    Sentence: "I've heard about uninsured drivers. What if someone without insurance hits me?"
    Output: uninsured, insurance, hits, fear

Now, extract from the following:

Sentence: "{sentence}"
"""
        }]
    }
]



    try:
        # Prepare input
        inputs = processor.apply_chat_template(
            messages,
            add_generation_prompt=True,
            tokenize=True,
            return_dict=True,
            return_tensors="pt"
        ).to(model.device, dtype=torch.bfloat16)

        input_len = inputs["input_ids"].shape[-1]

        # Generate output
        with torch.inference_mode():
            output = model.generate(**inputs, max_new_tokens=50, do_sample=False)
            output = output[0][input_len:]

        # Decode and clean output
        decoded = processor.decode(output, skip_special_tokens=True).strip()
        keywords = [kw.strip() for kw in decoded.split(",") if kw.strip()]
        return keywords[:5] + [""] * (5 - len(keywords))

    except Exception as e:
        print(f"Error on: {sentence[:40]}... -> {e}")
        return [""] * 5

"""#### Credibility"""

def credibility_extract_keywords(sentence):
    messages = [
    {
        "role": "system",
        "content": [{"type": "text", "text": "You are an assistant skilled in *Emotional persuasion strategy* keyword extraction."}]
    },
    {
        "role": "user",
        "content": [{
            "type": "text",
            "text": f"""Extract the *4 to 5 most important single-word keywords* from the following sentence, focusing specifically on the *Emotional persuasion strategy*.

Return only the keywords as a comma-separated list, with no explanation or extra text.
Important: Do not include product names, brand names, place names, or proper nouns.

Focus on words that express emotions, emotional triggers, fears, hopes, desires, or psychological concerns. Avoid factual or neutral terms unless they carry emotional weight.

Examples:
    Sentence: "And if I'm in an accident and need a rental car?"
    Output: accident, rental

    Sentence: "For your Jeep Wrangler, it's around $1200 per year. It's an investment in your adventures, knowing you're covered against the unexpected challenges of off-roading."
    Output: investment, adventures, unexpected, challenges, off-roading

    Sentence: "I've heard about uninsured drivers. What if someone without insurance hits me?"
    Output: uninsured, insurance, hits, fear

Now, extract from the following:

Sentence: "{sentence}"
"""
        }]
    }
]



    try:
        # Prepare input
        inputs = processor.apply_chat_template(
            messages,
            add_generation_prompt=True,
            tokenize=True,
            return_dict=True,
            return_tensors="pt"
        ).to(model.device, dtype=torch.bfloat16)

        input_len = inputs["input_ids"].shape[-1]

        # Generate output
        with torch.inference_mode():
            output = model.generate(**inputs, max_new_tokens=50, do_sample=False)
            output = output[0][input_len:]

        # Decode and clean output
        decoded = processor.decode(output, skip_special_tokens=True).strip()
        keywords = [kw.strip() for kw in decoded.split(",") if kw.strip()]
        return keywords[:5] + [""] * (5 - len(keywords))

    except Exception as e:
        print(f"Error on: {sentence[:40]}... -> {e}")
        return [""] * 5

"""#### cooperative"""

def cooperative_extract_keywords(sentence):
    messages = [
    {
        "role": "system",
        "content": [{"type": "text", "text": "You are an assistant skilled in *Emotional persuasion strategy* keyword extraction."}]
    },
    {
        "role": "user",
        "content": [{
            "type": "text",
            "text": f"""Extract the *4 to 5 most important single-word keywords* from the following sentence, focusing specifically on the *Emotional persuasion strategy*.

Return only the keywords as a comma-separated list, with no explanation or extra text.
Important: Do not include product names, brand names, place names, or proper nouns.

Focus on words that express emotions, emotional triggers, fears, hopes, desires, or psychological concerns. Avoid factual or neutral terms unless they carry emotional weight.

Examples:
    Sentence: "And if I'm in an accident and need a rental car?"
    Output: accident, rental

    Sentence: "For your Jeep Wrangler, it's around $1200 per year. It's an investment in your adventures, knowing you're covered against the unexpected challenges of off-roading."
    Output: investment, adventures, unexpected, challenges, off-roading

    Sentence: "I've heard about uninsured drivers. What if someone without insurance hits me?"
    Output: uninsured, insurance, hits, fear

Now, extract from the following:

Sentence: "{sentence}"
"""
        }]
    }
]



    try:
        # Prepare input
        inputs = processor.apply_chat_template(
            messages,
            add_generation_prompt=True,
            tokenize=True,
            return_dict=True,
            return_tensors="pt"
        ).to(model.device, dtype=torch.bfloat16)

        input_len = inputs["input_ids"].shape[-1]

        # Generate output
        with torch.inference_mode():
            output = model.generate(**inputs, max_new_tokens=50, do_sample=False)
            output = output[0][input_len:]

        # Decode and clean output
        decoded = processor.decode(output, skip_special_tokens=True).strip()
        keywords = [kw.strip() for kw in decoded.split(",") if kw.strip()]
        return keywords[:5] + [""] * (5 - len(keywords))

    except Exception as e:
        print(f"Error on: {sentence[:40]}... -> {e}")
        return [""] * 5

"""#### Policy"""

def policy_extract_keywords(sentence):
    messages = [
    {
        "role": "system",
        "content": [{"type": "text", "text": "You are an assistant skilled in *Emotional persuasion strategy* keyword extraction."}]
    },
    {
        "role": "user",
        "content": [{
            "type": "text",
            "text": f"""Extract the *4 to 5 most important single-word keywords* from the following sentence, focusing specifically on the *Emotional persuasion strategy*.

Return only the keywords as a comma-separated list, with no explanation or extra text.
Important: Do not include product names, brand names, place names, or proper nouns.

Focus on words that express emotions, emotional triggers, fears, hopes, desires, or psychological concerns. Avoid factual or neutral terms unless they carry emotional weight.

Examples:
    Sentence: "And if I'm in an accident and need a rental car?"
    Output: accident, rental

    Sentence: "For your Jeep Wrangler, it's around $1200 per year. It's an investment in your adventures, knowing you're covered against the unexpected challenges of off-roading."
    Output: investment, adventures, unexpected, challenges, off-roading

    Sentence: "I've heard about uninsured drivers. What if someone without insurance hits me?"
    Output: uninsured, insurance, hits, fear

Now, extract from the following:

Sentence: "{sentence}"
"""
        }]
    }
]



    try:
        # Prepare input
        inputs = processor.apply_chat_template(
            messages,
            add_generation_prompt=True,
            tokenize=True,
            return_dict=True,
            return_tensors="pt"
        ).to(model.device, dtype=torch.bfloat16)

        input_len = inputs["input_ids"].shape[-1]

        # Generate output
        with torch.inference_mode():
            output = model.generate(**inputs, max_new_tokens=50, do_sample=False)
            output = output[0][input_len:]

        # Decode and clean output
        decoded = processor.decode(output, skip_special_tokens=True).strip()
        keywords = [kw.strip() for kw in decoded.split(",") if kw.strip()]
        return keywords[:5] + [""] * (5 - len(keywords))

    except Exception as e:
        print(f"Error on: {sentence[:40]}... -> {e}")
        return [""] * 5

import pandas as pd

# Load your data
df = pd.read_csv("conversation2.csv")

# Placeholder for extracted keyword rows
keywords_list = []

# Define a mapping from strategy to its corresponding keyword extraction function
strategy_function_map = {
    "logical": logical_extract_keywords,
    "emotional": emotional_extract_keywords,
    "credibility": credibility_extract_keywords,
    "cooperative": cooperative_extract_keywords,
    "policy": policy_extract_keywords,
}

# Process each row and extract keywords
for _, row in df.iterrows():
    strategy = str(row["P-Strategy"]).strip().lower()
    utterance = row["utterance"]

    if strategy in strategy_function_map:
        extract_fn = strategy_function_map[strategy]
        try:
            keywords = extract_fn(utterance)
            # Ensure we always get exactly 5 values (pad with empty strings if needed)
            keywords = (keywords + [""] * 5)[:5]
        except Exception as e:
            print(f"Error processing row: {utterance} | Strategy: {strategy} | Error: {e}")
            keywords = [""] * 5
    else:
        keywords = [""] * 5  # If unknown strategy

    keywords_list.append(keywords)

# Convert to DataFrame
keyword_df = pd.DataFrame(keywords_list, columns=["keyword1", "keyword2", "keyword3", "keyword4", "keyword5"])

# Merge with original
df_with_keywords = pd.concat([df, keyword_df], axis=1)

# Save result
df_with_keywords.to_csv("gema_logical&emotiona_keywords2.csv", index=False)
print("✅ Output saved to 'gemma_logical_keywords2.csv'")

"""## Whole Dataset"""

import pandas as pd

# Load your data
df = pd.read_csv("conversation.csv")

# Placeholder for extracted keyword rows
keywords_list = []

# Define a mapping from strategy to its corresponding keyword extraction function
strategy_function_map = {
    "logical": logical_extract_keywords,
    "emotional": emotional_extract_keywords,
    "credibility": credibility_extract_keywords,
    "cooperative": cooperative_extract_keywords,
    "policy": policy_extract_keywords,
}

# Process each row and extract keywords
for _, row in df.iterrows():
    strategy = str(row["P-Strategy"]).strip().lower()
    utterance = row["utterance"]

    if strategy in strategy_function_map:
        extract_fn = strategy_function_map[strategy]
        try:
            keywords = extract_fn(utterance)
            # Ensure we always get exactly 5 values (pad with empty strings if needed)
            keywords = (keywords + [""] * 5)[:5]
        except Exception as e:
            print(f"Error processing row: {utterance} | Strategy: {strategy} | Error: {e}")
            keywords = [""] * 5
    else:
        keywords = [""] * 5  # If unknown strategy

    keywords_list.append(keywords)

# Convert to DataFrame
keyword_df = pd.DataFrame(keywords_list, columns=["keyword1", "keyword2", "keyword3", "keyword4", "keyword5"])

# Merge with original
df_with_keywords = pd.concat([df, keyword_df], axis=1)

# Save result
df_with_keywords.to_csv("keyword_all.csv", index=False)
print("✅ Output saved to 'keyword_all.csv'")